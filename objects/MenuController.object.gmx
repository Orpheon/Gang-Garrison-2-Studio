<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>show_error("The Create event needs to be overridden in all child objects.", true);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(!variable_local_exists(id, "baseybegin"))
{
    baseybegin = ybegin;
    mouse_samples = ds_list_create();
}
if(view_hview[0] &lt; 600)
{
    ds_list_add(mouse_samples, window_mouse_get_y());
    while(ds_list_size(mouse_samples) &gt; 10)
        ds_list_delete(mouse_samples, 0);
    var des_y;
    des_y = 0;
    for(i = 0; i &lt; ds_list_size(mouse_samples); i += 1)
        des_y += ds_list_find_value(mouse_samples, i);
    des_y /= ds_list_size(mouse_samples);
    
    ybegin = round(baseybegin
                   - min(1, max(0, des_y/view_hview[0]))
                     *(600-view_hview[0]));
}
stepHasRun = true;

var itemcount;
menu_hack_backbutton();
itemcount = menu_get_itemcount();

if(editing != -1) {
    switch (item_type[editing]) {
        case "edittext2":
        case "edittext":
        case "editnum":
            if (keyboard_check(vk_control) &amp;&amp; keyboard_check(ord("V"))) {
                keyboard_string += clipboard_get_text();
                keyboard_clear(ord("V"));
            }
            item_value[editing] = keyboard_string;
            break;
        case "editkeyormouse":
            if mouse_check_button(mb_left) {
                menu_set_var(editing, MOUSE_LEFT);
                execute_string(item_script[editing], MOUSE_LEFT);
                editing = -1;
                exit;
            }
            else if mouse_check_button(mb_right) {
                menu_set_var(editing, MOUSE_RIGHT);
                execute_string(item_script[editing], MOUSE_RIGHT);
                editing = -1;
                exit;
            }
        case "editkey":
            if keyboard_check_direct(vk_tab) keyboard_lastkey = vk_tab;
            if keyboard_lastkey != 0 {
                menu_set_var(editing, keyboard_lastkey);
                execute_string(item_script[editing], menu_get_var(editing));
                editing = -1;
                exit;
            }
    }
} else if(mouse_x &gt; view_xview[0]+xbegin) {
    if(mouse_y &gt;= view_yview[0]+ybegin-(spacing/2) and mouse_x &lt; view_xview[0]+xbegin+width)
    {
        virtualitem = max(0, round((mouse_y-(view_yview[0]+ybegin))/spacing));
        if(mouse_check_button_pressed(mb_left)){
            mouse_clear(mb_left);
            if(virtualitem &lt; itemcount) {
                switch (item_type[virtualitem]) {
                    case "script":
                        execute_string(item_script[virtualitem]);
                        break;
                    case "editscript":
                        item_value[virtualitem] = execute_string(item_script[virtualitem]);
                        break;
                    case "editkey":
                    case "editkeyormouse":
                        io_clear();
                        editing = virtualitem;
                        break;
                    case "edittext":
                    case "edittext2":
                    case "editnum":
                        keyboard_string = "";
                        editing = virtualitem;
                        break;
                    case "editselect":
                        item_value[virtualitem] = (item_value[virtualitem]+1) mod item_options[virtualitem];
                        menu_set_var(virtualitem, item_option_value[virtualitem, item_value[virtualitem]]);
                        execute_string(item_script[virtualitem], menu_get_var(virtualitem));
                        break;
                }
            }
        }
    }
    else if(mouse_y &lt; view_yview[0]+ybegin-taboffset+spacing/2 and mouse_y &gt; view_yview[0]+ybegin-taboffset-spacing/2
            and mouse_x &gt; view_xview[0]+xbegin+tabmargin and mouse_x &lt; view_xview[0]+xbegin+tabmargin+tabspacing*tabs)
    {
        virtualitem = min(-2, -2-floor((mouse_x-(view_xview[0]+xbegin+tabmargin))/tabspacing));
        if(mouse_check_button_pressed(mb_left))
        {
            mouse_clear(mb_left);
            if(-2-virtualitem &lt; tabs)
            {
                execute_string(tab_script[-2-virtualitem]);
            }
        }
    } else {
        virtualitem = -1;
    }
} else {
    virtualitem = -1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(!variable_local_exists(id, "baseybegin")) // This needs to be duplicated because of code execution order issues
{
    baseybegin = ybegin;
    mouse_samples = ds_list_create();
}
if(view_hview[0] &lt; 600)
{
    ds_list_add(mouse_samples, window_mouse_get_y());
    while(ds_list_size(mouse_samples) &gt; 10)
        ds_list_delete(mouse_samples, 0);
    var des_y;
    des_y = 0;
    for(i = 0; i &lt; ds_list_size(mouse_samples); i += 1)
        des_y += ds_list_find_value(mouse_samples, i);
    des_y /= ds_list_size(mouse_samples);
    
    ybegin = round(baseybegin
                   - min(1, max(0, des_y/view_hview[0]))
                     *(600-view_hview[0]));
}
{
    var i, val, gotVar, itemx, itemy, itemcount;
    menu_hack_backbutton();
    itemcount = menu_get_itemcount();
    
    if (dimmed)
    {   
        draw_set_color(c_black);
        draw_set_alpha(0.71);
        draw_rectangle(view_xview[0], view_yview[0], view_xview[0]+view_wview[0], view_yview[0]+view_hview[0], false);   
    }
    if (!dimmed and menumode and drawbg)
    {
        draw_set_color(c_black);
        draw_set_alpha(0.5);
        
        draw_pinched_blackrect(view_xview[0] + xbegin - bgoffsetx - 8,
                               view_yview[0] + ybegin - bgoffsety - 8,
                               bgwidth + 16, (itemcount-1)*spacing + bgheight + 16,
                               bginset, 4);
        
        draw_set_alpha(1);
    }
    
    // Dead block of state setters?
    draw_set_color(c_white);

    draw_set_valign(fa_middle);
    draw_set_halign(fa_left);
    draw_set_alpha(1);
    
    itemy = view_yview[0]+ybegin-taboffset;
    for(i=0; i&lt;tabs; i+=1)
    {
        itemx = view_xview[0]+xbegin+i*tabspacing+tabmargin;
        
        if(bgtabs)
        {
            draw_set_color(c_black);
            draw_set_alpha(0.5);
            
            draw_pinched_blackrect(itemx-bgoffsetx, itemy-bgoffsety, tabspacing-8, bgheight, bginset, bgbezel);
            
            draw_set_alpha(1);
        }
        
        if(i == -2-virtualitem and !editing)
            draw_set_color(c_red);
        else
            draw_set_color(c_white);
        
        draw_text(itemx, itemy, tab_name[i]);
    }
    
    itemx = view_xview[0]+xbegin;
    for (i = 0; i &lt; itemcount; i += 1)
    {
        itemy = view_yview[0]+ybegin+i*spacing;
        if(drawbg)
        {
            draw_set_color(c_black);
            draw_set_alpha(0.5);
            
            draw_pinched_blackrect(itemx - bgoffsetx, itemy - bgoffsety, bgwidth, bgheight, bginset, bgbezel);
            
            draw_set_alpha(1);
        }
    
        if (editing == i)
            draw_set_color(c_orange);
        else if(i == virtualitem and getsHighlight)
            draw_set_color(c_red);
        else
            draw_set_color(c_white);

        draw_text(view_xview[0]+xbegin,view_yview[0]+ybegin+i*spacing,item_name[i]);
        
        switch (item_type[i])
        {
        case "script":
            val = "";
            break;
        
        case "editscript":
        case "edittext2":
        case "edittext":
        case "editnum":
            val = item_value[i];
            break;
        
        case "editselect":
            val = item_option_label[i, item_value[i]];
            break;
        
        case "editkey":
            if (editing == i)
            {
                val = "Please press a key";
                break;
            }
        case "editkeyormouse":
            if (editing == i)
            {
                val = "Please press a key or mouse button";
                break;
            }
            switch (menu_get_var(i))
            {
            case vk_alt:
                val = "Alt";
                break;
            case vk_control:
                val = "Control";
                break;
            case vk_down:
                val = "Down";
                break;
            case vk_up:
                val = "Up";
                break;
            case vk_left:
                val = "Left";
                break;
            case vk_right:
                val = "Right";
                break;
            case vk_enter:
                val = "Enter";
                break;
            case vk_tab:
                val = "Tab";
                break;
            case vk_space:
                val = "Space Bar";
                break;
            case vk_shift:
                val = "Shift";
                break;
            case MOUSE_LEFT:
                val = "Left Mouse Button";
                break;
            case MOUSE_RIGHT:
                val = "Right Mouse Button";
                break;
            default:
                gotVar = menu_get_var(i);
                //Numpad number buttons
                if (gotVar &gt;= 96 &amp;&amp; gotVar &lt;=  105){
                    val = "NUMPAD " + chr(gotVar - 48);
                }
                //Numpad other buttons
                else if (gotVar &gt;= 106 &amp;&amp; gotVar &lt;=  111){
                    val = "NUMPAD " + chr(gotVar - 64);
                }
                //Function buttons
                else if (gotVar &gt;= 112 &amp;&amp; gotVar &lt;= 123) {
                    val = "F" + string(gotVar - 111);
                }
                //Comma, dot, minus
                else if (gotVar &gt;= 188 &amp;&amp; gotVar &lt;= 190) {
                    val = chr(gotVar - 144);
                }
                else val = chr(menu_get_var(i));
                break;
            }
            break;
        }
        draw_text(view_xview[0]+xbegin+valueoffset,view_yview[0]+ybegin+i*spacing,sanitiseNewlines(val));
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="27">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(stepHasRun)
    execute_string(menu_script_back);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(editing != -1) { 
    switch (item_type[editing]) {
        case "edittext":
            menu_set_var(editing, item_value[editing]);
            execute_string(item_script[editing], item_value[editing]);
            break;
        case "edittext2":
            item_value[editing] = execute_string(item_script[editing], item_value[editing]);
            menu_set_var(editing, item_value[editing]);
            break;
        case "editnum":
            var newval;
            newval = real(string_digits(item_value[editing]));
            if(item_limit[editing]&gt;0)
                newval = min(newval, item_limit[editing]);
            menu_set_var(editing, newval);
            execute_string(item_script[editing], menu_get_var(editing));
            item_value[editing] = string(menu_get_var(editing));
            break;
    }
    editing = -1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
