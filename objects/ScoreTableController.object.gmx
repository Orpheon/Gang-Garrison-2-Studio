<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-115000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{
    if (global.fadeScoreboard)
        alpha = 0.02;
    else
        alpha = 1;
    done = false;
    nameLen = 0;
    showadmin = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (done and !global.fadeScoreboard)
    instance_destroy();
else if (!done and alpha &lt; 1)
    alpha = min(1, power(alpha,power(0.5, global.delta_factor))+0.05);
else if (done and alpha &gt; 0)
    alpha = max(0, power(alpha,power(2, global.delta_factor))-0.05);
else if (done and alpha &lt; 1/256)
    instance_destroy();

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{
    var xoffset, yoffset, xsize, ysize, i, player, redteam, blueteam, spec, domCount;
    
    xoffset = view_xview[0]+view_wview[0]/2-280;
    yoffset = view_yview[0]+view_hview[0]/2-190;
    xsize = 800/5*3;
    ysize = 600/5*3;
    xcenter = view_xview[0]+view_wview[0]/2;
    
    draw_sprite_ext(Scoreboard, 0, xoffset, yoffset, 1, 1, 0, c_white, alpha*0.8);

    draw_set_alpha(alpha);
    draw_set_color(c_white);
    draw_set_valign(fa_top);
    draw_set_halign(fa_center);
        
    redteam = ds_priority_create();
    blueteam = ds_priority_create();  
    spec = ds_priority_create();
    
    for(i=0; i&lt;ds_list_size(global.players); i+=1)
    {
        player = ds_list_find_value(global.players, i);
        
        if(player.team == TEAM_RED)
            ds_priority_add(redteam, player, player.stats[POINTS]);
        else if (player.team == TEAM_BLUE)
            ds_priority_add(blueteam, player, player.stats[POINTS]);
        else if (player.team == TEAM_SPECTATOR)
            ds_priority_add(spec, player, 1);
    }
    
    with(JoiningPlayer)
    {
        if(occupiesSlot)
            ds_priority_add(spec, id, 0);
    }
    
    draw_set_color(make_color_rgb(227,226,225));
    draw_set_halign(fa_right);
    draw_set_font(global.countFont);
    draw_text_transformed(xcenter-(400-239),yoffset+23,ds_priority_size(redteam),1,1,0);
    draw_text_transformed(xcenter-(400-483),yoffset+23,ds_priority_size(blueteam),1,1,0);
    draw_set_font(global.gg2Font);
    
    if instance_exists(CTFHUD)
    {
        draw_text_transformed(xcenter-(400-384),yoffset,global.redCaps,4,4,0);
        draw_set_halign(fa_left);
        draw_text_transformed(xcenter-(400-412),yoffset,global.blueCaps,4,4,0);
    }
    else if instance_exists(ArenaHUD)
    {
        draw_text_transformed(xcenter-(400-384),yoffset,ArenaHUD.redWins,4,4,0);
        draw_set_halign(fa_left);
        draw_text_transformed(xcenter-(400-412),yoffset,ArenaHUD.blueWins,4,4,0);
    }
    
    for(i=0; ds_priority_size(redteam) &gt; 0; i += 1) {
        player = ds_priority_delete_max(redteam);
        
        if (i &lt; 12)
        {
            draw_set_color(c_red);
            if (showadmin and player != global.myself)
            {
                var _x, _y;
                _x = xoffset+6;
                _y = yoffset+70+20*(i+1);
                draw_sprite_ext(Boot,0,_x,_y,1,1,0,c_white,alpha);
                if (mouse_x &gt;= _x and mouse_x &lt; _x+16
                    and mouse_y &gt;= _y and mouse_y &lt; _y+16)
                {
                    draw_sprite_ext(Boot,0,_x,_y,1,1,0,c_red,alpha*0.5);
                    if (mouse_check_button_pressed(mb_left)) {
                        mouse_clear(mb_left);
                        player.kicked = true;
                    }        
                }
            }
            else
            {
                if (global.myself.team == player.team or global.mapchanging)
                {
                    draw_sprite_ext(Icon,player.class,xoffset+14,yoffset+70+20*(i+1),1,1,0,c_white,alpha);
                    draw_sprite_ext(Icon,player.class,xoffset+14,yoffset+70+20*(i+1),1,1,0,c_red,alpha*0.2);
                }
            }
        
            draw_name_badges(xoffset+28, yoffset+70+20*(i+1), player, alpha);
        
            draw_set_halign(fa_right);
            draw_text(xoffset+xsize/2-15, yoffset+70+20*(i+1), string(floor(player.stats[POINTS])));
            
            //Domination Medals
            domCount = domination_kills_getDomCount(player);
            if (domCount &gt; 0) {
                draw_sprite_ext(MedalS, 0, xoffset+xsize/2-5, yoffset+70+20*(i+1), 1, 1, 0, c_white, alpha);
                draw_set_color(make_color_rgb(227, 226, 225));
                draw_text_transformed(xoffset+xsize/2 + 12, yoffset+70+20*(i+1), string(domCount), 1, 1, 0);
            }
            //Dominated player
            if (domination_kills_get(global.myself.dominationKills, player) &gt; 3)
                draw_sprite_ext(MedalS, 3, xoffset+xsize/2 + 15, yoffset+70+20*(i+1), 1, 1, 0, c_white, alpha);
            //Nemesis
            else if (domination_kills_get(player.dominationKills, global.myself) &gt; 3)
                draw_sprite_ext(MedalS, 5, xoffset+xsize + 55, yoffset+70+20*(i+1), 1, 1, 0, c_white, alpha);
            
            if(player.object == -1)
                draw_sprite_ext(DeadS, 0, xoffset+195, yoffset+75+20*(i+1), 1, 1, 0, c_white, alpha);
        }          
    }
    
    for(i=0; ds_priority_size(blueteam) &gt; 0; i+=1) {
        player = ds_priority_delete_max(blueteam);

        if (i &lt; 12){
            draw_set_color(c_blue);
            if (showadmin &amp;&amp; player != global.myself) {
                var _x, _y;
                _x = xoffset+xsize/2+44;
                _y = yoffset+70+20*(i+1);
                draw_sprite_ext(Boot,0,_x,_y,1,1,0,c_white,alpha);
                if (mouse_x &gt;= _x and mouse_x &lt; _x+16
                    and mouse_y &gt;= _y and mouse_y &lt; _y+16)
                {
                    draw_sprite_ext(Boot,0,_x,_y,1,1,0,c_red,alpha*0.5);
                    if (mouse_check_button_pressed(mb_left)) {
                        mouse_clear(mb_left);
                        player.kicked = true;
                    }        
                }
            } else {
                if(global.myself.team == player.team) {
                    draw_sprite_ext(Icon,player.class,xoffset+xsize/2+49,yoffset+70+20*(i+1),1,1,0,c_white,alpha);
                    draw_sprite_ext(Icon,player.class,xoffset+xsize/2+49,yoffset+70+20*(i+1),1,1,0,c_blue,alpha*0.2);
                }
            }
       
            draw_name_badges(xoffset+xsize/2+60, yoffset+70+20*(i+1), player, alpha);
        
            draw_set_halign(fa_right);
            draw_text(xoffset+xsize+25, yoffset+70+20*(i+1), string(floor(player.stats[POINTS])));
            
            //Domination Medals
            domCount = domination_kills_getDomCount(player);
            if (domCount &gt; 0) {
                draw_sprite_ext(MedalS, 0, xoffset+xsize + 35, yoffset+70+20*(i+1), 1, 1, 0, c_white, alpha);
                draw_set_color(make_color_rgb(227, 226, 225));
                draw_text_transformed(xoffset+xsize + 52, yoffset+70+20*(i+1), string(domCount), 1, 1, 0);
            }
            //Dominated player
            if (domination_kills_get(global.myself.dominationKills, player) &gt; 3)
                draw_sprite_ext(MedalS, 3, xoffset+xsize + 55, yoffset+70+20*(i+1), 1, 1, 0, c_white, alpha);
            //Nemesis
            else if (domination_kills_get(player.dominationKills, global.myself) &gt; 3)
                draw_sprite_ext(MedalS, 6, xoffset+xsize + 55, yoffset+70+20*(i+1), 1, 1, 0, c_white, alpha);
                     
            if (player.object == -1)
                draw_sprite_ext(DeadS, 0, xoffset+472, yoffset+75+20*(i+1), 1, 1, 0, c_white, alpha);
        
        }
    }
    
    draw_set_color(c_white);
    draw_set_halign(fa_left);
    
    // Spectator printing code 
    
    draw_text(xoffset+xsize-475, yoffset+370,(string(ds_priority_size(spec))) + " spectator(s): ");    
    
    specList="";
    
    var __x, __y, __x_max, __bootlen, __str, nameWidth;
    
    __y = yoffset+370;
    __x_min = xoffset+xsize-350;
    __x_max = xoffset+xsize + 50;
    __x = __x_min;
    __bootlen = 0;
    for(i=0; ds_priority_size(spec) &gt; 0; i+=1) {
        player = ds_priority_delete_max(spec);
        
        if (showadmin &amp;&amp; player != global.myself) {
            var _x, _y;
            _x = __x;
            _y = __y;
            __bootlen = 16;
            draw_sprite_ext(Boot,0,_x,_y,1,1,0,c_white,alpha);
            if (mouse_x &gt;= _x and mouse_x &lt; _x+16
                and mouse_y &gt;= _y and mouse_y &lt; _y+16)
            {
                draw_sprite_ext(Boot,0,_x,_y,1,1,0,c_red,alpha*0.5);
                if (mouse_check_button_pressed(mb_left)) {
                    mouse_clear(mb_left);
                    player.kicked = true;
                }
            }
        }
        
        if (ds_priority_size(spec) == 0)
        {
            __str = '';
        }
        else
        {
            __str = ', ';
        }
        
        if(player.object_index == JoiningPlayer)
            nameWidth = string_width('['+sanitiseNewlines(player.name)+']');
        else
            nameWidth = name_width_badges(player);
        
        if (__bootlen + __x + nameWidth + string_length(__str) &gt; __x_max) {
            __x = __x_min;
            __y += string_height("/|ijgyA[") + 2;
        }
        
        if(player.object_index == JoiningPlayer)
            draw_text(__bootlen + __x, __y, '['+sanitiseNewlines(player.name)+']');
        else
            draw_name_badges(__bootlen + __x, __y, player, alpha);
                        
        __x += __bootlen + nameWidth;
        draw_text(__x, __y, __str);
        __x += string_width(__str);
    }
    
    draw_text(xoffset + 8, yoffset+48, "Server: " + sanitiseNewlines(string_copy(global.joinedServerName,1,25)));
    draw_text(xoffset+xsize/2+16, yoffset+48, "    Map: " + sanitiseNewlines(string_copy(global.currentMap,1,25)));
    
    ds_priority_destroy(redteam);
    ds_priority_destroy(blueteam);
    ds_priority_destroy(spec);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
