<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>SentryGibsS</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>alarm[0] = 150/global.delta_factor;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{
    alarm[0]=1;
    image_alpha -= 1/90;
    if(image_alpha &lt;= 0) {
        instance_destroy();
    }
}</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{
    hspeed /= 1.1;
    if(abs(hspeed)&lt;0.2)
        hspeed=0;
    
    wallSetSolid();
    if(place_free(x, y+1))
    {
        vspeed += 0.6 * global.delta_factor;
        if(vspeed &gt; 10)
            vspeed = 10;
    }
    else
    {
        vspeed = 0;
        move_outside_solid(90, 10);
    }
    wallUnsetSolid();
    
    x += hspeed * global.delta_factor;
    y += vspeed * global.delta_factor;
    x -= hspeed;
    y -= vspeed;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="IntelGate">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{
    var oldx, oldy, oldhspeed, oldvspeed, distleft, hleft, vleft;
    oldx=x;
    oldy=y;
    oldhspeed=hspeed;
    oldvspeed=vspeed;
    
    move_outside_solid(0, 8);
    move_outside_solid(180, 16);
    
    if(speed==0) {
        exit;
    }
    move_contact_solid(direction, speed);
    
    distleft = point_distance(x,y,oldx,oldy);
    hleft = oldhspeed-(x-oldx);
    vleft = oldvspeed-(y-oldy);
    
    if(not place_free(x,y+sign(vspeed))) {
        vspeed=0;
        if(not place_free(x+hleft,y)){
            move_contact_solid(direction, abs(hleft));
            hspeed=0;
        } else {
            x+=hleft;
        }
    } else if(not place_free(x+sign(hspeed),y)){
        do {
            if(place_free(x+sign(hspeed),y-6)) {
                y -= 6;
                if(place_free(x+hleft, y)) {
                    x += hleft;
                    hleft=0;
                } else {
                    if(hleft&gt;0) {
                        move_contact_solid(0, abs(hleft));
                    } else {
                        move_contact_solid(180, abs(hleft));
                    }
                    hleft = oldhspeed-(x-oldx);
                }
            } else {
                hspeed=0;
            }
        } until(hspeed==0 or hleft==0);
        if(hspeed==0 and not place_free(x,y+vleft)) {
            show_debug_message(string(direction));
            move_contact_solid(direction, distleft);
            vspeed=0;
        } else {
            y+=vleft;
        }
    }
    
    x -= hspeed;
    y -= vspeed;
}</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="TeamGate">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{
    var oldx, oldy, oldhspeed, oldvspeed, distleft, hleft, vleft;
    oldx=x;
    oldy=y;
    oldhspeed=hspeed;
    oldvspeed=vspeed;
    
    move_outside_solid(0, 8);
    move_outside_solid(180, 16);
    
    if(speed==0) {
        exit;
    }
    move_contact_solid(direction, speed);
    
    distleft = point_distance(x,y,oldx,oldy);
    hleft = oldhspeed-(x-oldx);
    vleft = oldvspeed-(y-oldy);
    
    if(not place_free(x,y+sign(vspeed))) {
        vspeed=0;
        if(not place_free(x+hleft,y)){
            move_contact_solid(direction, abs(hleft));
            hspeed=0;
        } else {
            x+=hleft;
        }
    } else if(not place_free(x+sign(hspeed),y)){
        do {
            if(place_free(x+sign(hspeed),y-6)) {
                y -= 6;
                if(place_free(x+hleft, y)) {
                    x += hleft;
                    hleft=0;
                } else {
                    if(hleft&gt;0) {
                        move_contact_solid(0, abs(hleft));
                    } else {
                        move_contact_solid(180, abs(hleft));
                    }
                    hleft = oldhspeed-(x-oldx);
                }
            } else {
                hspeed=0;
            }
        } until(hspeed==0 or hleft==0);
        if(hspeed==0 and not place_free(x,y+vleft)) {
            show_debug_message(string(direction));
            move_contact_solid(direction, distleft);
            vspeed=0;
        } else {
            y+=vleft;
        }
    }
    
    x -= hspeed;
    y -= vspeed;
}</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="Obstacle">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{
    var oldx, oldy, oldhspeed, oldvspeed, distleft, hleft, vleft;
    oldx=x;
    oldy=y;
    oldhspeed=hspeed;
    oldvspeed=vspeed;
    
    move_outside_solid(0, 8);
    move_outside_solid(180, 16);
    
    if(speed==0) {
        exit;
    }
    move_contact_solid(direction, speed);
    
    distleft = point_distance(x,y,oldx,oldy);
    hleft = oldhspeed-(x-oldx);
    vleft = oldvspeed-(y-oldy);
    
    if(not place_free(x,y+sign(vspeed))) {
        vspeed=0;
        if(not place_free(x+hleft,y)){
            move_contact_solid(direction, abs(hleft));
            hspeed=0;
        } else {
            x+=hleft;
        }
    } else if(not place_free(x+sign(hspeed),y)){
        do {
            if(place_free(x+sign(hspeed),y-6)) {
                y -= 6;
                if(place_free(x+hleft, y)) {
                    x += hleft;
                    hleft=0;
                } else {
                    if(hleft&gt;0) {
                        move_contact_solid(0, abs(hleft));
                    } else {
                        move_contact_solid(180, abs(hleft));
                    }
                    hleft = oldhspeed-(x-oldx);
                }
            } else {
                hspeed=0;
            }
        } until(hspeed==0 or hleft==0);
        if(hspeed==0 and not place_free(x,y+vleft)) {
            show_debug_message(string(direction));
            move_contact_solid(direction, distleft);
            vspeed=0;
        } else {
            y+=vleft;
        }
    }
    
    x -= hspeed;
    y -= vspeed;
}</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="FragBox">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_destroy();</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="KillBox">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_destroy();</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
