<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>StabMaskS</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{
    hitDamage = 8;
    alarm[0] = 6 / global.delta_factor;
    playsound(x,y,KnifeSnd)
    numKills = 0;
    maxKills = 2;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var imp;
imp = instance_create(x,y,Impact);
// Make the impact effect occur in the general direction of the stab, far enough from the spy to be noticable
imp.x += sign(cos(degtorad(direction)))*15;
imp.y -= 12;
imp.image_angle = direction;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>203</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_kill_object</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (direction &lt; 90 or direction &gt; 270)
    image_xscale = 1;
else
    image_xscale = -1
x=owner.x;
y=owner.y;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="Generator">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (other.team != team)
{
    // Intentionally not doing a line-of-sight check for walls, because
    // map designers might put walls behind the generator
    damageGenerator(ownerPlayer, other.id, hitDamage*0.36);
    
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="Sentry">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(other.team != team)
{
    var connecting, otherId;
    connecting = false;
    otherId = other.id;
    if(ownerPlayer.object != -1)
    {
        with(ownerPlayer.object)
            connecting |= place_meeting(x, y, otherId);
    }
    connecting |= !collision_line_bulletblocking(x, y-12, other.x, other.y);
    if(connecting)
    {
        damageSentry(ownerPlayer, other.id, hitDamage);
        other.lastDamageDealer = ownerPlayer;
        other.lastDamageSource = weapon;
        
        numKills += 1;
        if numKills &gt;= maxKills
            instance_destroy();
    }
    else
        instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="Character">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(other.id != ownerPlayer.object and other.team != team  and other.hp &gt; 0 and !other.ubered)
{
    var connecting, otherId;
    connecting = false;
    otherId = other.id;
    if(ownerPlayer.object != -1)
    {
        with(ownerPlayer.object)
            connecting |= place_meeting(x, y, otherId);
    }
    connecting |= !collision_line_bulletblocking(x, y-12, other.x, other.y);
    if(connecting)
    {
        damageCharacter(ownerPlayer, other.id, hitDamage);
        if (other.lastDamageDealer != ownerPlayer &amp;&amp; other.lastDamageDealer != other.player)
        {
            other.secondToLastDamageDealer = other.lastDamageDealer;
            other.alarm[4] = other.alarm[3]
        }
        other.alarm[3] = ASSIST_TIME / global.delta_factor;
        other.lastDamageDealer = ownerPlayer;
        if sign(other.image_xscale) == sign(image_xscale)
            other.lastDamageSource = DAMAGE_SOURCE_BACKSTAB;
        else
            other.lastDamageSource = DAMAGE_SOURCE_KNIFE;
        var blood;
        if(global.gibLevel &gt; 0)
        {
            repeat(70)
            {
                blood = instance_create(x,y,Blood);
                blood.direction = direction-180;
            }
        }
        
        numKills += 1;
        if (numKills &gt;= maxKills)
            instance_destroy();
    }
    else
        instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
