<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Child objects will need to define:
// hitDamage, flameLife, burnIncrease, durationIncrease, afterburnFalloff (bool), penetrateCap
// Then they need to call the inherited event (i.e. this code)
alarm[0] = flameLife / global.delta_factor;

enemiesHit = ds_list_create();
    
perseverant = random(1) &lt; (1/8); // 1/8 chance

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ds_list_destroy(enemiesHit);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>203</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_kill_object</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="4" ename="Generator">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (other.team != team)
{
    damageGenerator(ownerPlayer, other.id, hitDamage);
    instance_destroy()
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="Sentry">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(other.team != team) {
    damageSentry(ownerPlayer, other.id, hitDamage);
    other.lastDamageDealer = ownerPlayer;
    other.lastDamageSource = weapon;
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="Character">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(other.id != ownerPlayer.object and other.team != team and other.ubered == 0  and other.hp &gt; 0)
{
    if (ds_list_find_index(enemiesHit,other.id) != -1)
        exit;
        
    damageCharacter(ownerPlayer, other.id, hitDamage);
        
    if (other.lastDamageDealer != ownerPlayer and other.lastDamageDealer != other.player)
    {
        other.secondToLastDamageDealer = other.lastDamageDealer;
        other.alarm[4] = other.alarm[3];
    }
    other.alarm[3] = ASSIST_TIME / global.delta_factor;
    other.lastDamageDealer = ownerPlayer;
    other.lastDamageSource = weapon;
    
    // afterburn stuff
    {
        other.burnDuration += durationIncrease; 
        
        var falloffAmount;
        falloffAmount = min(1, // factor can't exceed 1
            (flameLife - alarm[0]*global.delta_factor) // value higher when life is fresh (alarm 0 is high)
            /flameLife); // normalize to 1
        if(afterburnFalloff)
            falloffFactor = falloffAmount*0.65+0.35; // Reduce heat additions of "old"/distant flames -- 0.35 to 1.0 "curve"
        else
            falloffFactor = 1;
        
        if(other.burnIntensity &gt; other.legIntensity and afterburnFalloff) // reduce heat additions above the "leg" heat
            falloffFactor /= 2;
        
        other.burnIntensity += burnIncrease * falloffFactor;
            
        other.burnDuration = min(other.burnDuration, other.maxDuration);
        other.burnIntensity = min(other.burnIntensity, other.maxIntensity);
        
        other.burnedBy = ownerPlayer;
        other.afterburnSource = weapon;
        other.alarm[0] = other.decayDelay / global.delta_factor;
    }
    dealFlicker(other.id);
    
    if (ds_list_size(enemiesHit) &gt;= penetrateCap and !perseverant)
        instance_destroy();
    else
        ds_list_add(enemiesHit, other.id);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
