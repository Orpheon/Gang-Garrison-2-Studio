<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-109999</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>afktimeout=9000;
afktimer=afktimeout;
//checkpoint system for each keypad #
//2 arrays keeps track of the x, y locations that each keypad # has saved.
for (i=0; i&lt;=9; i+=1;) {
    savex_view[i]=-1;
    savey_view[i]=-1;
}
//variables for tracking a specific player
tracking=false;
track_id=0;
player = noone;

numpadKeys[0] = vk_numpad0;
numpadKeys[1] = vk_numpad1;
numpadKeys[2] = vk_numpad2;
numpadKeys[3] = vk_numpad3;
numpadKeys[4] = vk_numpad4;
numpadKeys[5] = vk_numpad5;
numpadKeys[6] = vk_numpad6;
numpadKeys[7] = vk_numpad7;
numpadKeys[8] = vk_numpad8;
numpadKeys[9] = vk_numpad9;

// deals with problem of global.myself not existing prior to deserialisation
myTeam = TEAM_SPECTATOR;
if (global.myself != -1)
{
    myTeam = global.myself.team;
} 

// only auto-track if not on a team
if (myTeam == TEAM_SPECTATOR)
{
    event_user(7);
}
else
{
    tracking=true;
    player = global.myself;
}
// so you can actually see the initial tracking
// back up keyboard string because io_clear clears it
var _keyboard_string;
_keyboard_string = keyboard_string;
io_clear();
keyboard_string = _keyboard_string;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.myself != -1)
    myTeam = global.myself.team;

if(global.myself.object != -1)
    instance_destroy();

var moved;
moved = false;
stopTracking = false;

//moving view - mapped keys
if(!instance_exists(MenuController))
{
    if keyboard_check(global.left) || keyboard_check(global.left2)
    {
        if (x &gt; view_wview/2)
            x -= 20 * global.delta_factor;
        moved = true;
    }
    else if keyboard_check(global.right) || keyboard_check(global.right2)
    {
        if (x &lt; map_width()-view_wview/2)
            x += 20 * global.delta_factor;
        moved = true;
    }
    
    if keyboard_check(global.jump) || keyboard_check(global.jump2)
    {
        if (y &gt; view_hview/2)
            y -= 20 * global.delta_factor;
        moved = true;
    }
    else if keyboard_check(global.down) || keyboard_check(global.down2)
    {
        if (y &lt; map_height()-view_hview/2)
            y += 20 * global.delta_factor;
        moved = true;
    }
}

if(moved)
{
    afktimer = afktimeout;
    stopTracking = true;
}
else if(tracking)
{
    if (instance_exists(player))
    {
        if(player.team != TEAM_SPECTATOR)
        {
            if(player.object)
            {
                if(!(player.object.cloak &amp;&amp; player.team != myTeam))
                {
                    x = round(player.object.x);
                    y = round(player.object.y);
                }
                else
                    stopTracking = true;
            }
        }
        else
            stopTracking = true;
        if (instance_exists(player.corpse) and !player.object and tracking)
        {
            x = round(player.corpse.x);
            y = round(player.corpse.y);
        }
    }
    else
        stopTracking = true;
}

if(tracking and stopTracking) 
{
    tracking = false;
}

// Clip view to map area
// We want a different area depending on whether we're tracking a player or not.
if(!tracking)
{
    x = max(view_wview/2, min(map_width()-view_wview/2, x));
    y = max(view_hview/2, min(map_height()-view_hview/2, y));
}
else // We're tracking a player, so allow the view to show area from off of the map
{
    x = max(0, min(map_width(), x));
    y = max(0, min(map_height(), y));
}
view_xview = x-view_wview/2;
view_yview = y-view_hview/2;

afktimer -= 1 * global.delta_factor;

if((afktimer&lt;=0) and global.isHost==false)
{
    with(Client)
        instance_destroy();

    show_message("You have been disconnected from the server. Reason: AFK");
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="18">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>for(i=ds_list_size(global.players)-1; i&gt;=0; i-=1)
{
    var newTrackId, newPlayer;
    newTrackId = (track_id + i) mod ds_list_size(global.players);
    newPlayer = ds_list_find_value(global.players, newTrackId);
    if(newPlayer.object and newPlayer != global.myself)
    {
        if(newPlayer.team == myTeam || myTeam == TEAM_SPECTATOR)
        {
            if(!tracking)
            {
                tracking = true;
            }
            track_id = newTrackId;
            player = newPlayer;
            break;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="17">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>for(i=1; i&lt;=ds_list_size(global.players); i+=1)
{
    var newTrackId, newPlayer;
    newTrackId = (track_id + i) mod ds_list_size(global.players);
    newPlayer = ds_list_find_value(global.players, newTrackId);
    if(newPlayer.object and newPlayer != global.myself)
    {
        if(newPlayer.team == myTeam || myTeam == TEAM_SPECTATOR)
        {
            if(!tracking)
            {
                tracking = true;
            }
            track_id = newTrackId;
            player = newPlayer;
            break;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>xoffset = view_xview[0];
yoffset = view_yview[0];
xsize = view_wview[0];
ysize = view_hview[0];

// special thanks to wareya for the warhud HP cross code &amp; images
var sprite_xpos, sprite_ypos, icon_xpos, icon_ypos, hppixels;

draw_set_alpha(1);
draw_rectangle_color(view_xview,view_yview,view_xview+xsize,view_yview+20,c_black,c_black,c_black,c_black,0);
draw_rectangle_color(view_xview,view_yview+ysize-20,view_xview+xsize,view_yview+ysize,c_black,c_black,c_black,c_black,0);

draw_set_color(c_white);
if (tracking)
{
    draw_name_badges(xoffset+50, yoffset+ysize-16, player, 1);
    if (player.object == -1)
        exit;
    if (global.myself.team == TEAM_SPECTATOR and player.object.maxHp != 0)
    {
        sprite_xpos = -2;
        sprite_ypos = ysize-62;
        icon_xpos = sprite_xpos;
        icon_ypos = sprite_ypos + 20;
        draw_sprite_ext(SpectatorHealthCross, 0, xoffset+sprite_xpos, yoffset+sprite_ypos, 2, 2, 0, c_white, 1);
        hppixels = player.object.hp/player.object.maxHp*17;
        draw_sprite_part_ext(SpectatorHealthFill,0,0,(17-hppixels)+10,43,hppixels+1,xoffset+icon_xpos, yoffset+icon_ypos+(17-hppixels)*2,2,2,c_red,1);
        draw_sprite_part_ext(SpectatorHealthFill,0,0,(17-hppixels)+10,43,hppixels+1,xoffset+icon_xpos, yoffset+icon_ypos+(17-hppixels)*2,2,2,c_green,player.object.hp/player.object.maxHp);
    }
    draw_sprite(SpectatorCrosshairS, player.team,
                round(player.object.x) + cos(degtorad(player.object.aimDirection))*player.object.aimDistance,
                round(player.object.y) - sin(degtorad(player.object.aimDirection))*player.object.aimDistance);
    
}

if (global.myself != -1)
{
    if ((global.myself.alarm[5] &gt; 0) and (global.myself.team != TEAM_SPECTATOR))
    {
        draw_set_valign(fa_center);
        draw_set_halign(fa_left);
        if (!instance_exists(ArenaHUD))
            draw_text(xoffset+10, yoffset+10,'Respawn in ' +string(ceil(global.myself.alarm[5]/30*global.delta_factor))+ ' second(s).')
        else
            draw_text(xoffset+10, yoffset+10,'No Respawning in Arena');
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="109">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_user(8);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="107">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_user(7);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(!instance_exists(MenuController))
    exit;

var i;
for(i=0; i&lt;=9; i+=1)
{
    if(keyboard_check_pressed(numpadKeys[i]))
    {
        if(savex_view[i] == -1)
        {
            savex_view[i] = x;
            savey_view[i] = y;
            if(!instance_exists(NoticeO))
                instance_create(0,0,NoticeO);
            with(NoticeO)
                notice = NOTICE_SETCHECKPOINT;
        }
        else if(x != savex_view[i] || y != savey_view[i])
        {
            x = savex_view[i];
            y = savey_view[i];
        }
        else
        {
            savex_view[i] = -1;
            savey_view[i] = -1;
            if(!instance_exists(NoticeO))
                instance_create(0,0,NoticeO);
            with(NoticeO)
                notice = NOTICE_DESTROYCHECKPOINT;
        }
        tracking=false;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
