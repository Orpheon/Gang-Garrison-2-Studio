<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>FlamethrowerS</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>Weapon</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{
    xoffset = -11;
    yoffset = 4;
    refireTime = 1;
    event_inherited();
    
    blastDistance = 150;
    blastAngle = 75;
    blastStrength = 28;
    characterBlastStrength = 15;
    blastNoFlameTime = 15;
    blastReloadTime = 40;
    flareReloadTime = 55;
    alarm[1] = blastReloadTime / global.delta_factor;
    alarm[2] = flareReloadTime / global.delta_factor;
    readyToBlast = false;
    readyToFlare = false;
    justBlast = false;
    
    maxAmmo = 200;
    ammoCount = maxAmmo;
    soundLoopTime = 30;
    currentTime = 0;
    
    reloadBuffer = 7;
    isRefilling = false;
    
    if(golden)
    {
        normalSprite = FlamethrowerGoldS;
        recoilSprite = FlamethrowerGoldFS;
        blastSprite = FlamethrowerGoldBlastS;
        dropSprite = FlamethrowerGoldDropS;
        reloadsprite = -1;
    }
    else
    {
        normalSprite = FlamethrowerS;
        recoilSprite = FlamethrowerFS;
        blastSprite = FlamethrowerBlastS;
        dropSprite = FlamethrowerDropS;
        reloadSprite = -1
    }
    sprite_index = normalSprite;
    
    //play at least 2 frames
    recoilTime = 3;
    recoilAnimLength = sprite_get_number(recoilSprite)/2;
    recoilImageSpeed = recoilAnimLength/recoilTime;
    
    blastAnimLength = sprite_get_number(blastSprite)/2;
    blastImageSpeed = blastAnimLength/blastNoFlameTime;

    dropTime = 4;
    dropAnimLength = sprite_get_number(dropSprite)/2;
    dropImageSpeed = dropAnimLength/dropTime;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{
    loopsoundstop(FlamethrowerSnd);
}</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="7">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Drop Expire</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>sprite_index = normalSprite
image_speed = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="6">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Recoil Expire</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Override this if we're airblasting
if (sprite_index != blastSprite) {
    sprite_index = dropSprite;
    image_speed = dropImageSpeed * global.delta_factor;
    image_index = 0;
    alarm[7] = dropTime / global.delta_factor;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>isRefilling = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{
    loopsoundstop(FlamethrowerSnd);
}</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>readyToFlare = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>readyToBlast = true;</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (justBlast)
{
    justBlast = false;
    //Airblast Recoil Animation
    sprite_index = blastSprite;
    image_index = 0;
    image_speed = blastImageSpeed * global.delta_factor;
    alarm[7] = blastNoFlameTime / global.delta_factor;
    alarm[6] = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (ammoCount &lt; 0)
    ammoCount = 0;
else if (ammoCount &lt;= maxAmmo and isRefilling)
    ammoCount += 1.8 * global.delta_factor;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{
    if (readyToBlast &amp;&amp; ammoCount &gt;= 40)
    {
        //Base
        playsound(x,y,CompressionBlastSnd);
        poof = instance_create(x+lengthdir_x(25,owner.aimDirection),y+lengthdir_y(25,owner.aimDirection),AirBlastO);
        if (image_xscale == 1)
        {
            poof.image_xscale = 1;
            poof.image_angle = owner.aimDirection;
        }
        else
        {
            poof.image_xscale = -1;
            poof.image_angle = owner.aimDirection+180;
        }
        poof.owner = owner;
        with(poof)
            motion_add(owner.direction, owner.speed * global.delta_factor);
        
        var shot;
        //Flare
        if (owner.keyState &amp; $10 and ammoCount &gt;= 75 and readyToFlare)
        {
            var newx, newy;
            newx = x+lengthdir_x(25,owner.aimDirection);
            newy = y+lengthdir_y(25,owner.aimDirection);
            if !collision_line_bulletblocking(x, y, newx, newy)
            {
                shot = createShot(newx,newy,Flare, DAMAGE_SOURCE_FLARE, owner.aimDirection, 15);                
                justShot=true;
                readyToFlare=false;
                ammoCount -= 35;
                alarm[2] = flareReloadTime / global.delta_factor;
            }
        }
            
        //Reflects
        with(Rocket)
        {
            if(ownerPlayer.team != other.owner.team)
            {
                dir = point_direction(other.x, other.y, x, y);
                dist = point_distance(other.x, other.y, x, y);
                angle = abs((dir-other.owner.aimDirection)+720) mod 360;
                if collision_circle(x,y,5,other.poof,false,true)
                {
                    ownerPlayer = other.ownerPlayer;
                    team = other.owner.team;
                    weapon = DAMAGE_SOURCE_REFLECTED_ROCKET;
                    hitDamage = 25;
                    explosionDamage = 30;
                    knockback = 8;
                    alarm[1] = 40 / global.delta_factor;
                    alarm[2] = 80 / global.delta_factor;
                    motion_set(other.owner.aimDirection, speed);
                }
            }
        }
        with(Flare)
        {
            if(ownerPlayer.team != other.owner.team)
            {
                dir = point_direction(other.x, other.y, x, y);
                dist = point_distance(other.x, other.y, x, y);
                angle = abs((dir-other.owner.aimDirection)+720) mod 360;
                if collision_circle(x,y,5,other.poof,false,true)
                {
                    ownerPlayer = other.ownerPlayer;
                    team = other.owner.team;
                    weapon = DAMAGE_SOURCE_REFLECTED_FLARE;
                    alarm[0]=40 / global.delta_factor;
                    
                    motion_set(other.owner.aimDirection, speed);
                }
            }
        }
        
        with(Mine)
        {
            if(ownerPlayer.team != other.owner.team)
            {
                dir = point_direction(other.x, other.y, x, y);
                dist = point_distance(other.x, other.y, x, y);
                angle = abs((dir-other.owner.aimDirection)+720) mod 360;
                if collision_circle(x,y,5,other.poof,false,true)
                {
                    motion_set(other.owner.aimDirection, max(speed, other.blastStrength / 3));
                    reflector = other.ownerPlayer;
                    if (stickied)
                    {
                        var dx, dy, l;
                        speed *= 0.65;
                        dy = (place_meeting(x,y-3,Obstacle) &gt; 0);
                        dy -= (place_meeting(x,y+3,Obstacle) &gt; 0);
                        dx = (place_meeting(x-3,y,Obstacle) &gt; 0);
                        dx -= (place_meeting(x+3,y,Obstacle) &gt; 0);
                        l = sqrt(dx*dx+dy*dy);
                        if(l&gt;0)
                        {
                            var normalspeed;
                            dx /= l;
                            dy /= l;
                            normalspeed = dx*hspeed + dy*vspeed;
                            if(normalspeed &lt; 0)
                            {
                                hspeed -= 2*normalspeed*dx;
                                vspeed -= 2*normalspeed*dy;
                            }
                        }
                        stickied = false;
                    }
                }
            }
        }
        
        with(Character)
        {
            dir = point_direction(other.x, other.y, x, y);
            dist = point_distance(other.x, other.y, x, y);
            angle = abs((dir-other.owner.aimDirection)+720) mod 360;
            if (collision_circle(x,y,25,other.poof,false,true))
            {
                //Shoves
                if (team != other.owner.team)
                {
                    motion_add(other.owner.aimDirection,
                               other.characterBlastStrength*(1-dist/other.blastDistance));
                    vspeed -= 2;
                    moveStatus = 3;
                    if (lastDamageDealer != other.ownerPlayer and lastDamageDealer != player)
                    {
                        secondToLastDamageDealer = lastDamageDealer;
                        alarm[4] = alarm[3];
                    }
                    alarm[3] = ASSIST_TIME / global.delta_factor;
                    lastDamageDealer = other.ownerPlayer;
                    lastDamageSource = -1;
                } 
                //Extinguishes
                else if (burnIntensity &gt; 0 or burnDuration &gt; 0)
                {
                    for(i = 0; i &lt; realnumflames; i += 1)
                    {
                        var f;
                        f = instance_create(x + flameArray_x[i], y + flameArray_y[i], Flame);
                        f.direction = other.owner.aimDirection;
                        f.speed = 6.5+random(2.5);
                        f.owner = other.owner;
                        f.ownerPlayer = other.ownerPlayer;
                        f.team = other.owner.team;
                        f.weapon = DAMAGE_SOURCE_FLAMETHROWER;
                        with(f)
                            motion_add(direction, speed);
                    }
                    burnIntensity = 0;
                    burnDuration = 0;
                    burnedBy = -1;
                    afterburnSource = -1;
                }
            }
        }
        
        with(LooseSheet)
        {
            dir = point_direction(other.x, other.y, x, y);
            dist = point_distance(other.x, other.y, x, y);
            angle = abs((dir-other.owner.aimDirection)+720) mod 360;
            if collision_circle(x,y,25,other.poof,false,true)
            {
                motion_add(other.owner.aimDirection, other.blastStrength*(1-dist/other.blastDistance) );
            }
        }
        
        with(Gib)
        {
            dir = point_direction(other.x, other.y, x, y);
            dist = point_distance(other.x, other.y, x, y);
            angle = abs((dir-other.owner.aimDirection)+720) mod 360;
            if collision_circle(x,y,25,other.poof,false,true)
            {
                motion_add(other.owner.aimDirection, other.blastStrength*(1-dist/other.blastDistance) );
            }
        }
        
        //Finish
        justBlast = true;
        readyToBlast=false;
        readyToShoot=false;
        alarm[5]=blastReloadTime / global.delta_factor;
        isRefilling = false;
        alarm[1]=blastReloadTime / global.delta_factor;
        alarm[0]=blastNoFlameTime / global.delta_factor;
        ammoCount -= 40;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{
    var newx, newy;
    newx = x+lengthdir_x(25,owner.aimDirection);
    newy = y+lengthdir_y(25,owner.aimDirection) + owner.equipmentOffset;
    // prevent sputtering
    if (ammoCount &lt; 1.8)
        ammoCount -= 1.8;
    if (readyToShoot and ammoCount &gt;= 1.8
        and !collision_line_bulletblocking(x,y,newx,newy))
    {
        if(alarm[3] &lt;= 0)
            loopsoundstart(x,y,FlamethrowerSnd);
        else
            loopsoundmaintain(x,y,FlamethrowerSnd);
        alarm[3] = 2 / global.delta_factor;
        
        var shot, calculatedspread;
        randomize();
        calculatedspread = sign(random(2)-1)*power(random(3), 1.8);
        calculatedspread *= 1 - hspeed/owner.basemaxspeed;
        shot = createShot(newx, newy, Flame, DAMAGE_SOURCE_FLAMETHROWER, owner.aimDirection+calculatedspread,6.5+random(3.5));
        with(shot)
            motion_add(owner.direction, owner.speed);
        
        justShot=true;
        readyToShoot=false;
        isRefilling = false;
        ammoCount -= 1.8;
        
        if (ammoCount &gt; 0)
            alarm[0] = refireTime / global.delta_factor;
        else
            alarm[0] = reloadBuffer*2 / global.delta_factor;
        alarm[5] = reloadBuffer / global.delta_factor;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(owner.taunting)
    exit;
    
var imageOffset, xdrawpos, ydrawpos;
imageOffset = owner.team;
xdrawpos = round(x+xoffset*image_xscale);
ydrawpos = round(y+yoffset) + owner.equipmentOffset;
if (alarm[6] &lt;= 0){
    if (alarm[7] &gt; 0) {
        //if we are not shooting, but airblasting/dropping
        if (sprite_index == dropSprite) {
            imageOffset = floor(image_index mod dropAnimLength) + dropAnimLength*owner.team
        }else if (sprite_index == blastSprite){
            imageOffset = floor(image_index mod blastAnimLength) + blastAnimLength*owner.team
        }
    }else{
        //set the sprite to idle
        imageOffset = owner.team;
    }
}else{
    //We are shooting, loop the shoot animation
    imageOffset = floor(image_index mod recoilAnimLength) + recoilAnimLength*owner.team
}


if !owner.player.humiliated draw_sprite_ext(sprite_index,imageOffset, xdrawpos, ydrawpos, image_xscale, image_yscale, image_angle, c_white, 1);
if (owner.ubered) {
    if owner.team == TEAM_RED
        ubercolour = c_red;
    else if owner.team == TEAM_BLUE
        ubercolour = c_blue;
    draw_sprite_ext(sprite_index,imageOffset,round(x+xoffset*image_xscale),round(y+yoffset),image_xscale,image_yscale,image_angle,ubercolour,0.7*image_alpha);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
