<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>RocketS</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{
    hitDamage = 25;
    explosionDamage = 30;
    blastRadius = 65;
    characterHit = -1;
    exploded = false;
    knockback = 8;
    bubbled = false;
    explodeImmediately = false;
    
    fade = false;
    distanceToTravel = 800;
    playersPassed = ds_list_create();
    
    alarm[1] = 20 / global.delta_factor;
    alarm[2] = 30 / global.delta_factor;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(variable_local_exists("rocketblurParticleType")) {
    part_type_destroy(rocketblurParticleType);
}
ds_list_destroy(playersPassed);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>knockback=0;</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if knockback &gt;5 knockback=5;</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="Generator">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{
    if(team != other.team) {
        damageGenerator(ownerPlayer, other.id, hitDamage);
        characterHit = -1;
        event_user(5);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="Sentry">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(team != other.team) {
    characterHit=other.id;
    event_user(5);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="Character">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{
    if (other.team != team)
    {
        with(other)
        {
            dealFlicker(id);
        }
        characterHit = other.id;
        other.solid = true;
        really_move_contact_solid(direction, speed);
        other.solid = false;
        
        with(other) motion_add(other.direction, 2);
        
        event_user(5);
    }
    else if (ds_list_find_index(playersPassed, other.player) == -1 and other.player != ownerPlayer)
    {
        ds_list_add(playersPassed, other.player);
        distanceToTravel -= 100;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="15">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{  
    if(characterHit.id != ownerPlayer.object)
    {
        if(exploded)
            exit;
        else
            exploded = true;
        if(characterHit != -1) {
            if(characterHit.team != team || characterHit.id == ownerPlayer.object and !characterHit.ubered )
            {
                damageAuto( ownerPlayer, characterHit, hitDamage );
                if object_is_ancestor(characterHit.object_index, Character)
                {
                    if (characterHit.lastDamageDealer != ownerPlayer and characterHit.lastDamageDealer != characterHit.player)
                    {
                        characterHit.secondToLastDamageDealer = characterHit.lastDamageDealer;
                        characterHit.alarm[4] = characterHit.alarm[3]
                    }
                    characterHit.alarm[3] = ASSIST_TIME / global.delta_factor;
                }
                characterHit.lastDamageDealer = ownerPlayer;
                characterHit.lastDamageSource = weapon;
            }
        }
        instance_create(x,y,Explosion);
        playsound(x,y,ExplosionSnd);
        
        with (Character) {
            if (distance_to_object(other) &lt; other.blastRadius and !(team == other.team and id != other.ownerPlayer.object and place_meeting(x, y+1, Obstacle))){
                var rdir, vectorfactor;
                rdir = point_direction(other.x, other.y, x+(left_bound_offset+right_bound_offset)/2, y+(top_bound_offset+bottom_bound_offset)/2);
                vectorfactor = point_distance(0, 0, power(sin(degtorad(rdir)), 2), power(cos(degtorad(rdir)), 2));
                var fake_distance;
                fake_distance = distance_to_object(other);
                if(fake_distance &lt; 1) fake_distance = 0; // fix distance of rockets to players that they collide with, now that it's handled properly
                if (1 - fake_distance/other.blastRadius &lt;= 0.25)
                    continue;
                motion_add(rdir, min(15, other.knockback-other.knockback*(fake_distance/other.blastRadius)) * vectorfactor);
                if(!ubered and hp &gt; 0)
                {
                    if (other.team != team) or (id==other.ownerPlayer.object)
                    {
                        damageCharacter( other.ownerPlayer, id, other.explosionDamage*(1-(fake_distance/other.blastRadius)) );
                        
                        if(id == other.ownerPlayer.object and instance_exists(lastDamageDealer) and lastDamageDealer != other.ownerPlayer)
                            lastDamageSource = DAMAGE_SOURCE_FINISHED_OFF_GIB;
                        else 
                        {
                            if (lastDamageDealer != other.ownerPlayer &amp;&amp; lastDamageDealer != player){
                                secondToLastDamageDealer = lastDamageDealer;
                                alarm[4] = alarm[3]
                            }
                            if (other.ownerPlayer != id)
                                alarm[3] = ASSIST_TIME / global.delta_factor;
                            lastDamageDealer = other.ownerPlayer;
                            lastDamageSource = other.weapon;
                        }
                        dealFlicker(id);
                    }
                    if id==other.ownerPlayer.object and other.team == team {
                        moveStatus = 1;
                        speed*=1.06;
                    }else if other.team == team and (id!=other.ownerPlayer.object){
                        moveStatus = 4;
                            if point_direction(x,y+5,other.x,other.y-5)&gt;210 and point_direction(x,y,other.x,other.y)&lt;330 {
                            vspeed-=4*(1-(fake_distance/other.blastRadius));
                            speed*=1.3;
                        }
                    } else {
                        moveStatus = 2;
                        if point_direction(x,y+5,other.x,other.y-5)&gt;210 and point_direction(x,y,other.x,other.y)&lt;330 {
                            vspeed-=4*(1-(fake_distance/other.blastRadius));
                            speed*=1.3;
                        }
                    }
                    if(global.gibLevel &gt; 0) {
                        if (id==other.ownerPlayer.object) or (other.team!=team) {
                            repeat(3) {
                                var blood;
                                blood = instance_create(x,y,Blood);
                                blood.direction = point_direction(other.x,other.y,x,y)-180;
                            }
                        }
                    }
                } else {
                    if hp &gt; 0 and id==other.ownerPlayer.object and other.team == team and ubered{ //just in case
                        moveStatus = 1;
                        speed*=1.055; //slight nerf to compensate for uber
                    }
                }
            }
        }

        with (Sentry) {
            if (distance_to_object(other) &lt; other.blastRadius){
                if(other.team != team)
                {
                    damageSentry( other.ownerPlayer, id, other.explosionDamage*(1-(distance_to_object(other)/other.blastRadius)) );
                    
                    lastDamageDealer = other.ownerPlayer;
                    lastDamageSource = other.weapon;
                }
            }
        }        
        
        with (Generator) {
            if (distance_to_object(other) &lt; other.blastRadius){
                if(other.team != team)
                {
                    damageGenerator( other.ownerPlayer, id, other.explosionDamage*(1-(distance_to_object(other)/other.blastRadius)) );
                }
            }
        }
        
        with (DeadGuy) {
          if (distance_to_object(other) &lt; other.blastRadius){
            motion_add(point_direction(other.x,other.y,x,y),10-10*(distance_to_object(other)/other.blastRadius));
          }
        }
        
        with (Gib) {
            if (distance_to_object(other) &lt; other.blastRadius){
                motion_add(point_direction(other.x,other.y,x,y),15-15*(distance_to_object(other)/other.blastRadius));
                rotspeed=random(151)-75;
            }
        }
    
        with(Mine) {
            if (distance_to_object(other) &lt; other.blastRadius*0.66 and (other.team != team or other.ownerPlayer == ownerPlayer)){
                event_user(2);
            }
        }
        
        with(LooseSheet) {
            if (distance_to_object(other) &lt; other.blastRadius){
                motion_add(point_direction(other.x,other.y,x,y),10-10*(distance_to_object(other)/other.blastRadius));
            }
        }
        
        with(Bubble) {
            if (distance_to_object(other) &lt; other.blastRadius*0.66){
                instance_destroy();
            }    
        }

        instance_destroy();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite_ext(sprite_index,team,x,y,image_xscale,image_yscale,image_angle,c_white,image_alpha);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
