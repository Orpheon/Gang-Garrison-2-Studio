<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>BladeS</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1</depth>
  <persistent>0</persistent>
  <parentName>Weapon</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{
    xoffset = 0;
    yoffset = -3;
    refireTime = 5;
    event_inherited();
    
    bubbleRefireTime = 4;
    replenishing = 1;
    bubbleCount = 0;
    maxBubbles = 25;
    bladesOut = 0;
    bladeLife = 15;
    maxBlades = 1;
    bladeDamage = 17;
    depletedBladeDamage = 8;
    maxAmmo = 90;
    replenishingRate = 2;
    ammoCount = maxAmmo;
    lowAmmoThreshold = 1/3 * maxAmmo;
    highAmmoThreshold = 2/3 * maxAmmo;
    reloadTime = 55;
    reloadBuffer = 0;
    
    if(golden)
    {
        normalSprite = BladeGoldS;
        recoilSprite = BladeGoldFS;
    }
    else
    {
        normalSprite = BladeS;
        recoilSprite = BladeFS;
    }
    reloadSprite = -1;
    sprite_index = normalSprite;
    
    recoilTime = 1;
    recoilAnimLength = sprite_get_number(recoilSprite)/2;
    recoilImageSpeed = recoilAnimLength/recoilTime;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with (BladeB)
    if (ownerPlayer == other.ownerPlayer)
        instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>replenishing = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (replenishing)
    ammoCount = min(max(ammoCount + replenishingRate*global.delta_factor, 0), maxAmmo);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{
    if(readyToShoot and bladesOut &lt; maxBlades)
    {
        replenishing = 0;
        playsound(x,y,BladeSnd);
        var shot;
        randomize();
        shot = createShot(x+lengthdir_x(5, owner.aimDirection), y+lengthdir_y(5, owner.aimDirection), BladeB, global.DAMAGE_SOURCE_BLADE, owner.aimDirection, 12);
        // We don't want the blade sprite to be rotated with the direction of the shot, since that would cause the hitbox to also be rotated,
        // which can cause the blade to get stuck in walls that are behind the Querly. With an angle of 0, the BladeB hitbox is exactly as wide
        // as the Querly's, so that this won't happen. See https://github.com/Gang-Garrison-2/Gang-Garrison-2/issues/230
        shot.image_angle = 0;
        if(golden)
            shot.sprite_index = BladeProjectileGoldS;
        if(ammoCount &gt; highAmmoThreshold)
            shot.hitDamage = bladeDamage;
        else if(ammoCount &lt; lowAmmoThreshold)
            shot.hitDamage = depletedBladeDamage;
        else
            shot.hitDamage = (ammoCount-lowAmmoThreshold)/(highAmmoThreshold-lowAmmoThreshold)*(bladeDamage-depletedBladeDamage)+depletedBladeDamage;
        alarm[0] = refireTime / global.delta_factor;
        shot.alarm[0] = bladeLife / global.delta_factor;
        alarm[5] = bladeLife / global.delta_factor; //this isn't for when the blade actually dies, but the longest it could live
        bladesOut += 1;
        with(shot)
            hspeed += owner.hspeed;
        justShot = true;
        readyToShoot = false;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{
    if(readyToShoot and bubbleCount &lt; maxBubbles)
    {
        var shot;
        randomize();
        shot = createShot(x+lengthdir_x(8, owner.aimDirection), y+lengthdir_y(8, owner.aimDirection), Bubble, global.DAMAGE_SOURCE_BUBBLE, owner.aimDirection, 10);
        shot.gun = id;
        with(shot)
        {
            motion_add(owner.direction, owner.speed);
        }
        justShot = true;
        readyToShoot = false;
        alarm[0] = bubbleRefireTime / global.delta_factor;
        bubbleCount += 1;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
