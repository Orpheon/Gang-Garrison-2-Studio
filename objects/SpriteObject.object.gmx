<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprite64</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_speed = 0;
animationSpeed = 0;
opacity = 1;
fade = true;
trigger = 0;
triggering = 0;
triggerDistance = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>resource = readProperty(other.properties, "resource", STRING, "");
ds_list_add(other.specialEntities, id);

var scale;
scale = readProperty(other.properties, "scale", REAL, 1);
if (scale != 1)
{
    image_xscale = scale;
    image_yscale = scale;
}

fade = readProperty(other.properties, "fade", BOOL, fade);
animationSpeed = readProperty(other.properties, "animationspeed", REAL, animationSpeed) * global.delta_factor;
depth = readProperty(other.properties, "depth", REAL, depth);
opacity = readProperty(other.properties, "opacity", REAL, opacity);
trigger = readProperty(other.properties, "trigger", REAL, trigger);
triggerDistance = readProperty(other.properties, "distance", REAL, triggerDistance);

image_alpha = opacity;
if (trigger == 0)
    image_speed = animationSpeed;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var xoffset, yoffset, xsize, ysize, dist;

xoffset = view_xview[0];
yoffset = view_yview[0];
xsize = view_wview[0];
ysize = view_hview[0];
dist = distance_to_point(xoffset+xsize/2,yoffset+ysize/2);

if (dist &gt; 800)
    exit;
    
if (dist &lt;= triggerDistance &amp;&amp; fade)
    image_alpha = max(0.4*opacity, image_alpha - 0.1*global.delta_factor);
else
    image_alpha = min(opacity, image_alpha + 0.1*global.delta_factor);

if (trigger &gt; 0)
{
    dist = distance_to_object(Character);
        
    if (triggering == 0 &amp;&amp; dist &lt;= triggerDistance)
        triggering = 1;
    else if (image_index &gt;= image_number-1 &amp;&amp; dist &gt; triggerDistance &amp;&amp; triggering == 1)
    {
        if (trigger == 2)
            triggering = -1;
        else {
            triggering = 0;
            image_index = 0;
        }
    }
}
    
switch(triggering)
{
    case 1:
        image_index = min(image_number-1, image_index + animationSpeed);
        break;
    case -1:
        image_index = max(0, image_index - animationSpeed);
        if (image_index == 0)
            triggering = 0;
}

    
draw_sprite_ext(sprite_index, image_index, x, y, image_xscale, image_yscale, image_angle, c_white, image_alpha);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
